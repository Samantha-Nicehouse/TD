package com.example.treasuredetector;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;

import java.util.concurrent.ConcurrentMap;

public class MapsFragment extends Fragment {


    private static final String TAG = "MapsFragment";
    private static final int LOCATION_PERMISSION_REQUEST_CODE = 44;
    SupportMapFragment smf;
    FusedLocationProviderClient client;
    private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION;
    private static final String COURSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION;
    private boolean mLocationPermissionsGranted = false;




        /*this code was autogenerated by FragmentMap selection*/
        @Nullable
        @Override
        public View onCreateView(@NonNull LayoutInflater inflater,
                                 @Nullable ViewGroup container,
                                 @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.fragment_maps, container, false);

        }

        /*this code was autogenerated by FragmentMap selection*/
        @Override
        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            smf = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.google_map);

            //initialize fused location
            client = LocationServices.getFusedLocationProviderClient(getContext());

            //check permission
            Log.d(TAG, "getLocationPermission: getting location permissions");
            String[] permissions = {Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION};
            if (ActivityCompat.checkSelfPermission(getContext(), FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)
              if (ActivityCompat.checkSelfPermission(getContext(), COURSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {   //when permission granted
                // call method
                getCurrentLocation();
            } else {
                //when permission denied
                //request permission
                ActivityCompat.requestPermissions((Activity) getContext().getApplicationContext(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 44);

            }
        }

        public void getCurrentLocation() {
            //initialize task location
            @SuppressLint("MissingPermission")
            Task<Location> task = client.getLastLocation();
            task.addOnSuccessListener(new OnSuccessListener<Location>() {
                @Override
                public void onSuccess(Location location) {
                    //when success
                    if (location != null) {
                        //sync map
                        smf.getMapAsync(new OnMapReadyCallback() {
                            @Override
                            public void onMapReady(GoogleMap googleMap) {
                                //initialize coordinates
                                LatLng latLng = new LatLng(location.getLatitude(),
                                        location.getLongitude());
                                //create marker options
                                MarkerOptions markerOptions = new MarkerOptions().position(latLng)
                                        .title("I am here");

                                //Zoom Map
                                //Animating to zoom the marker
                                googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(
                                        latLng, 10));

                                //add marker on Map
                                googleMap.addMarker(markerOptions);

                            }
                        });
                    }
                }
            });

        }

        public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)
        {
            if (requestCode == 44){
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){
                    //when permission granted
                    // call method
                    getCurrentLocation();

                }
            }

        }

    private void getLocationPermission(){
        Log.d(TAG, "getLocationPermission: getting location permissions");
        String[] permissions = {Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION};

        if (ActivityCompat.checkSelfPermission(getContext(), FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){
            if (ActivityCompat.checkSelfPermission(getContext(), COURSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {   //when permission granted

                mLocationPermissionsGranted = true;
            } else {
                //when permission denied
                //request permission
                ActivityCompat.requestPermissions((Activity) getContext().getApplicationContext(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 44);
            }
            }else{
                ActivityCompat.requestPermissions((Activity) getContext().getApplicationContext(), new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, 44);
            }
        }

    }




